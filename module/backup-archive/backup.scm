(define-module (backup-archive backup)
  #:use-module (backup-archive program)
  #:use-module (backup-archive message)
  #:use-module (backup-archive common)
  #:use-module (backup-archive config)
  #:use-module (backup-archive profile)
  #:use-module (backup-archive archive)
  #:use-module (backup-archive find)
  #:export     (make-backup))

(define (make-backup id)
  (let* ((profile (and (format #t "loading profile ~a...\n" id)
                       (load-profile (string->symbol id))))
         (fmt (profile-fmt profile))
         (archive (and (display "searching archives...\n")
                       (archive-find id (profile-dest profile) fmt)))
         (find-status (and (format #t "generating file list...\n")
                           (find-files (profile-orig profile)
                                       (profile-pred profile)
                                       (car archive)))))
    (cond
     ((not (zero? (cadr find-status)))
      (msg-error "find exited with non-zero status")
      (exit 1))
     (else
      (format #t "file count: ~s\n" (string-count (car find-status) #\null))
      (format #t "output file: ~a\n" (cdr archive))
      (if (ask-yes-no-question? "continue? ")
          (begin
            (archive-write (cdr archive)
                           (car find-status)
                           (archive-format-filters fmt))
            (format #t "done.\n"))
          (format #t "aborting.\n"))))))

